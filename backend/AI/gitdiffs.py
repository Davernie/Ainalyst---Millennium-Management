import os
import requests
import urllib.parse
import litellm
from dotenv import load_dotenv
from backend.app.Jira.Jira import get_jira_description

# Note: please set GITLAB_API_TOKEN as an environment variable to run this script, 
# the integration with frontend so the user can input the repo API token is not implemented yet

load_dotenv()
# Load API keys from environment variable for security (Message me your tcd email so I can add you to the project on OpenAI's site)
GITLAB_API_TOKEN = os.getenv("GITLAB_API_TOKEN") # Gitlab API token must be generated by the user. Place token of your own repos to test it out
GITLAB_URL = os.getenv("GITLAB_URL", "https://gitlab.com")  # Update if using a self-hosted GitLab
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    raise ValueError("Make sure OPENAI_API_KEY is set.")
if not GITLAB_API_TOKEN:
    print("⚠️ Warning: GitLab API Token is not set. Some GitLab API features may not work.")

jira_description = get_jira_description()

def get_project_id_from_url(repo_url):
    """Fetch the GitLab project ID using the repository URL."""
    if not GITLAB_API_TOKEN:
        print("GitLab API Token is missing. Skipping project ID lookup.")
        return None

    print(f"DEBUG: GITLAB_URL = {GITLAB_URL}")
    print(f"DEBUG: repo_url = {repo_url}")

    # Ensure the user-provided URL is valid
    if not repo_url.startswith(GITLAB_URL):
        print("Invalid GitLab repository URL. Please enter a valid project URL.")
        return None

    # Extract the project path (removing GitLab base URL)
    project_path = repo_url.replace(GITLAB_URL + "/", "", 1)  # Correctly remove base URL
    encoded_path = urllib.parse.quote(project_path, safe="")

    # API request to get the project details
    url = f"{GITLAB_URL}/api/v4/projects/{encoded_path}"
    headers = {"PRIVATE-TOKEN": GITLAB_API_TOKEN}

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response.json().get("id")  # Return the Project ID
    except requests.exceptions.RequestException as e:
        print(f"Error fetching project ID: {e}")
        return None
    
# Fetch the latest commits
def get_latest_commits(project_id, limit=5):
    url = f"{GITLAB_URL}/api/v4/projects/{project_id}/repository/commits"
    headers = {"PRIVATE-TOKEN": GITLAB_API_TOKEN}
    params = {"per_page": limit}

    try:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()

        return [commit["id"] for commit in response.json()]
    except requests.RequestException as e:
        print(f"Error fetching commits: {e}")
        return []

def get_git_diff(project_id, commit_sha):
    url = f"{GITLAB_URL}/api/v4/projects/{project_id}/repository/commits/{commit_sha}/diff"
    headers = {"PRIVATE-TOKEN": GITLAB_API_TOKEN}

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()

        diffs = response.json()
        return "\n".join([f"File: {diff['new_path']}\n{diff['diff']}" for diff in diffs])
    except requests.RequestException as e:
        print(f"Error fetching diff for commit {commit_sha}: {e}")
        return None

# Analyse the Git diff using the LLM
def analyze_git_diff(git_diff_content):
    if not git_diff_content:
        print("No Git diff content found.")
        return
    # If the git diff content is non-empty, it's analysed by the LLM.
    try:
        response = litellm.completion(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "You analyze Git diffs for common code smells and suggest improvements."},
            {"role": "user", "content": f"Analyze the following Git diff and suggest improvements:\n\n{git_diff_content}\n\nAlso, analyze the following JIRA issue description to see if the code addresses all the issues and features mentioned:\n\n{jira_description}"}
            ],
            temperature=0.0,
            max_tokens=1500,
            top_p=0.95,
            frequency_penalty=0.1,
            presence_penalty=0.0,
            api_key=OPENAI_API_KEY,
        )

        analysis_result = response["choices"][0]["message"]["content"]
        print(analysis_result)

        # Save output to file
        with open("git_diffs_report.txt", "w") as out_file: # Only populated by endpoint if there is a valid git diff
            out_file.write(analysis_result)
    except Exception as e:
        print(f"Error analyzing Git diff with OpenAI API: {e}")

# Main function to fetch commits and analyze diffs
def main():
    repo_url = input("Enter the GitLab repository URL: ").strip()
    project_id = get_project_id_from_url(repo_url)

    if not project_id:
        print("Could not retrieve project ID. Exiting...")
        return

    print(f"Found Project ID: {project_id}")

    commit_shas = get_latest_commits(project_id, limit=3)
    if not commit_shas:
        print("No commits found.")
        return

    for sha in commit_shas:
        print(f"Analyzing commit: {sha}")
        git_diff = get_git_diff(project_id, sha)
        if git_diff:
            analyze_git_diff(git_diff)
        else:
            print(f"Skipping commit {sha} due to missing or invalid Git diff.")

# Ensure script doesn't interfere with other modules
if __name__ == "__main__":
    main()


